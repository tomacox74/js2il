{
  "sections": [
    {
      "section": "13",
      "title": "ECMAScript Language: Expressions",
      "url": "https://tc39.es/ecma262/#sec-ecmascript-language-expressions",
      "subsections": [
        {
          "subsection": "13.1",
          "title": "Primary Expressions",
          "url": "https://tc39.es/ecma262/#sec-primary-expression",
          "paragraphs": [
            {
              "paragraph": "13.1.3",
              "title": "BooleanLiteral",
              "url": "https://tc39.es/ecma262/#sec-boolean-literals",
              "features": [
                {
                  "feature": "Boolean literals (true/false)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/UnaryOperator_Typeof.js",
                    "Js2IL.Tests/JavaScript/JSON_Parse_SimpleObject.js"
                  ],
                  "notes": "Emits proper IL for true/false and boxes when needed in arrays/log calls. See generator snapshot: Js2IL.Tests/Literals/GeneratorTests.BooleanLiteral.verified.txt."
                }
              ]
            },
            {
              "paragraph": "13.1.4",
              "title": "Template Literals",
              "url": "https://tc39.es/ecma262/#sec-template-literals",
              "features": [
                {
                  "feature": "Template literals (basic interpolation)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/String_TemplateLiteral_Basic.js"
                  ],
                  "notes": "Concatenates quasis and expressions via runtime Operators.Add with JS string/number coercion. Tagged templates are not yet supported."
                }
              ]
            },
            {
              "paragraph": "13.1.1",
              "title": "NumericLiteral",
              "url": "https://tc39.es/ecma262/#sec-numeric-literals",
              "features": [
                {
                  "feature": "Numeric literals (integer and decimal)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/BinaryOperator_AddNumberNumber.js",
                    "Js2IL.Tests/JavaScript/BinaryOperator_MulNumberNumber.js"
                  ],
                  "notes": "Numbers are represented as double and used pervasively across arithmetic, comparison, and control-flow tests."
                }
              ]
            },
            {
              "paragraph": "13.1.2",
              "title": "StringLiteral",
              "url": "https://tc39.es/ecma262/#sec-string-literals",
              "features": [
                {
                  "feature": "String literals (single/double quotes; escapes)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/String_StartsWith_Basic.js",
                    "Js2IL.Tests/JavaScript/String_Replace_Regex_Global.js"
                  ],
                  "notes": "Backed by .NET System.String; values are boxed/unboxed where needed in member calls and concatenation."
                }
              ]
            },
            {
              "paragraph": "13.1.5",
              "title": "NullLiteral",
              "url": "https://tc39.es/ecma262/#sec-null-literals",
              "features": [
                {
                  "feature": "null literal",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Literals_NullAndUndefined.js",
                    "Js2IL.Tests/JavaScript/JSON_Parse_SimpleObject.js"
                  ],
                  "notes": "null emission validated in literals and variable tests; see execution snapshot Js2IL.Tests/Literals/ExecutionTests.Literals_NullAndUndefined.verified.txt."
                }
              ]
            },
            {
              "paragraph": "13.1.6",
              "title": "undefined (Identifier)",
              "url": "https://tc39.es/ecma262/#sec-undefined",
              "features": [
                {
                  "feature": "undefined identifier usage",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Literals_NullAndUndefined.js"
                  ],
                  "notes": "Handled as the ECMAScript undefined value and participates in JS truthiness; see execution snapshot Js2IL.Tests/Literals/ExecutionTests.Literals_NullAndUndefined.verified.txt."
                }
              ]
            }
          ]
        },
        {
          "subsection": "13.2",
          "title": "Declarations",
          "url": "https://tc39.es/ecma262/#sec-declarations",
          "paragraphs": [
            {
              "paragraph": "13.2.1",
              "title": "let/const",
              "url": "https://tc39.es/ecma262/#sec-let-and-const-declarations",
              "features": [
                {
                  "feature": "let/const",
                  "status": "Partially Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Variable_LetBlockScope.js",
                    "Js2IL.Tests/JavaScript/Variable_LetShadowing.js",
                    "Js2IL.Tests/JavaScript/Variable_LetNestedShadowingChain.js",
                    "Js2IL.Tests/JavaScript/Variable_LetFunctionNestedShadowing.js",
                    "Js2IL.Tests/JavaScript/Variable_ConstSimple.js"
                  ],
                  "notes": "Block scoping, shadowing chain, nested function capture, and simple const initialization implemented. Temporal dead zone access error (Variable_TemporalDeadZoneAccess.js) and reads before initialization are still pending."
                },
                {
                  "feature": "Const reassignment throws TypeError",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Variable_ConstReassignmentError.js"
                  ],
                  "notes": "Assignment to a const Identifier and ++/-- on const emit a runtime TypeError; error is catchable via try/catch."
                }
              ]
            },
            {
              "paragraph": "13.2.2",
              "title": "Binding patterns (destructuring)",
              "url": "https://tc39.es/ecma262/#sec-destructuring-binding-patterns",
              "features": [
                {
                  "feature": "Object destructuring in variable declarations (const/let) â€” basic",
                  "status": "Partially Supported",
                  "testScripts": [
                    "Js2IL.Tests/Node/JavaScript/PerfHooks_PerformanceNow_Basic.js"
                  ],
                  "notes": "Supports simple object patterns in variable declarations, e.g., const { performance } = require('perf_hooks'); The initializer is evaluated once and properties are bound via direct typed getters when available (for known intrinsics) or via JavaScriptRuntime.Object.GetProperty. Not yet supported: nested patterns, default values, renaming (alias), rest properties, array destructuring, and parameter/assignment destructuring."
                }
              ]
            },
            {
              "paragraph": "13.2.1",
              "title": "var",
              "url": "https://tc39.es/ecma262/#sec-variable-statement",
              "features": [
                {
                  "feature": "var",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Function_GlobalFunctionChangesGlobalVariableValue.js",
                    "Js2IL.Tests/JavaScript/Function_GlobalFunctionDeclaresAndCallsNestedFunction.js",
                    "Js2IL.Tests/JavaScript/Function_GlobalFunctionLogsGlobalVariable.js"
                  ],
                  "notes": ""
                }
              ]
            },
            {
              "paragraph": "13.2.3",
              "title": "Function declarations",
              "url": "https://tc39.es/ecma262/#sec-function-definitions",
              "features": [
                {
                  "feature": "Function declarations",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Function_HelloWorld.js"
                  ],
                  "notes": ""
                },
                {
                  "feature": "Arrow functions",
                  "status": "Partially Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/ArrowFunction_SimpleExpression.js",
                    "Js2IL.Tests/JavaScript/ArrowFunction_BlockBody_Return.js",
                    "Js2IL.Tests/JavaScript/ArrowFunction_GlobalFunctionCallsGlobalFunction.js",
                    "Js2IL.Tests/JavaScript/ArrowFunction_GlobalFunctionReturnsNestedFunction_LogsParamAndGlobal.js",
                    "Js2IL.Tests/JavaScript/ArrowFunction_GlobalFunctionWithMultipleParameters.js",
                    "Js2IL.Tests/JavaScript/ArrowFunction_NestedFunctionAccessesMultipleScopes.js",
                    "Js2IL.Tests/JavaScript/ArrowFunction_CapturesOuterVariable.js"
                  ],
                  "notes": "Covers expression- and block-bodied arrows, multiple parameters, nested functions, and closure capture across scopes (including returning functions that capture globals/locals). Not yet supported: default/rest parameters, parameter destructuring, lexical this/arguments semantics, and spread at call sites."
                }
              ]
            },
            {
              "paragraph": "13.2.3.1",
              "title": "Default parameters, Rest parameters",
              "url": "https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-evaluation",
              "features": [
                {
                  "feature": "Default parameters",
                  "status": "Not Supported",
                  "testScripts": [],
                  "notes": ""
                },
                {
                  "feature": "Rest parameters",
                  "status": "Not Supported",
                  "testScripts": [],
                  "notes": ""
                }
              ]
            },
            {
              "paragraph": "13.2.5",
              "title": "Spread syntax",
              "url": "https://tc39.es/ecma262/#sec-argument-lists-runtime-semantics-argumentlistevaluation",
              "features": [
                {
                  "feature": "Spread syntax",
                  "status": "Not Supported",
                  "testScripts": [],
                  "notes": ""
                }
              ]
            }
          ]
        },
        {
          "subsection": "13.2.4",
          "title": "Array Initializer (ArrayLiteral)",
          "url": "https://tc39.es/ecma262/#sec-array-initializer",
          "paragraphs": [
            {
              "paragraph": "13.2.4.1",
              "title": "ArrayLiteral",
              "url": "https://tc39.es/ecma262/#sec-array-initializer",
              "features": [
                {
                  "feature": "Array literal basic construction",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/ArrayLiteral.js"
                  ],
                  "notes": "Covers creation, element access, and length property. See also verified output in Literals/GeneratorTests.ArrayLiteral.verified.txt."
                },
                {
                  "feature": "Array literal spread (copy elements)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_Spread_Copy.js"
                  ],
                  "notes": "Spread elements in array literals are emitted via JavaScriptRuntime.Array.PushRange; supports copying from another array."
                }
              ]
            }
          ]
        },
        {
          "subsection": "13.2.5",
          "title": "Object Initializer (ObjectLiteral)",
          "url": "https://tc39.es/ecma262/#sec-object-initializer",
          "paragraphs": [
            {
              "paragraph": "13.2.5.1",
              "title": "ObjectLiteral",
              "url": "https://tc39.es/ecma262/#sec-object-initializer",
              "features": [
                {
                  "feature": "Object literal basic construction",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/ObjectLiteral.js"
                  ],
                  "notes": "Covers creation and property access. See also verified output in Literals/GeneratorTests.ObjectLiteral.verified.txt."
                }
              ]
            }
          ]
        },
        {
          "subsection": "13.4",
          "title": "Unary Operators",
          "url": "https://tc39.es/ecma262/#sec-ecmascript-language-expressions",
          "paragraphs": [
            {
              "paragraph": "13.4.3",
              "title": "typeof operator",
              "url": "https://tc39.es/ecma262/#sec-typeof-operator",
              "features": [
                {
                  "feature": "typeof",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/UnaryOperator_Typeof.js"
                  ],
                  "notes": "Implemented via JavaScriptRuntime.TypeUtilities::Typeof and IL emission for UnaryExpression(typeof). typeof null returns 'object'; functions report 'function'; objects report 'object'."
                }
              ]
            },
            {
              "paragraph": "13.4.7",
              "title": "Logical not operator (!)",
              "url": "https://tc39.es/ecma262/#sec-logical-not-operator",
              "features": [
                { "feature": "Unary ! (Logical not)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_If_NotFlag.js"], "notes": "Branch inversion supported in conditionals (e.g., if (!x) ...), and value negation in non-branching contexts." }
              ]
            },
            {
              "paragraph": "13.4.9",
              "title": "Postfix increment operator (++)",
              "url": "https://tc39.es/ecma262/#sec-postfix-increment-operator",
              "features": [
                { "feature": "Unary ++ (Postfix increment)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/UnaryOperator_PlusPlusPostfix.js"], "notes": "" }
              ]
            },
            {
              "paragraph": "13.4.10",
              "title": "Postfix decrement operator (--)",
              "url": "https://tc39.es/ecma262/#sec-postfix-decrement-operator",
              "features": [
                { "feature": "Unary -- (Postfix decrement)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/UnaryOperator_MinusMinusPostfix.js"], "notes": "" }
              ]
            }
          ]
        },
        {
          "subsection": "13.5",
          "title": "Binary Operators",
          "url": "https://tc39.es/ecma262/#sec-ecmascript-language-expressions",
          "paragraphs": [
            {
              "paragraph": "13.5.16",
              "title": "Conditional (ternary) operator (?:)",
              "url": "https://tc39.es/ecma262/#sec-conditional-operator",
              "features": [
                {
                  "feature": "Conditional operator (?:)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/ControlFlow_Conditional_Ternary.js"
                  ],
                  "notes": "Expression-level branching with both arms coerced to object where needed. Verified via generator and execution tests in ControlFlow subgroup."
                }
              ]
            },
            {
              "paragraph": "13.5.1",
              "title": "Addition operator (+)",
              "url": "https://tc39.es/ecma262/#sec-additive-operators",
              "features": [
                { "feature": "Binary + (Addition)", "status": "Supported", "testScripts": [
                  "Js2IL.Tests/JavaScript/BinaryOperator_AddNumberNumber.js",
                  "Js2IL.Tests/JavaScript/BinaryOperator_AddStringNumber.js",
                  "Js2IL.Tests/JavaScript/BinaryOperator_AddStringString.js",
                  "Js2IL.Tests/JavaScript/Classes_ClassConstructor_TwoParams_AddMethod.js"
                ], "notes": "Fast-path string concat; general '+' follows JS coercion via runtime helper." }
              ]
            },
            {
              "paragraph": "13.5.2",
              "title": "Subtraction operator (-)",
              "url": "https://tc39.es/ecma262/#sec-subtraction-operator",
              "features": [
                { "feature": "Binary - (Subtraction)", "status": "Supported", "testScripts": [
                  "Js2IL.Tests/JavaScript/BinaryOperator_SubNumberNumber.js",
                  "Js2IL.Tests/JavaScript/Classes_ClassConstructor_TwoParams_SubtractMethod.js"
                ], "notes": "Numeric subtraction; matches JS semantics for non-numeric via coercion helpers where applicable." }
              ]
            },
            {
              "paragraph": "13.5.3",
              "title": "Multiplicative operators (*, /, %)",
              "url": "https://tc39.es/ecma262/#sec-multiplicative-operators",
              "features": [
                { "feature": "Binary * (Multiplication)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_MulNumberNumber.js"], "notes": "" },
                { "feature": "Binary / (Division)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_DivNumberNumber.js"], "notes": "" },
                { "feature": "Binary % (Remainder)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_ModNumberNumber.js"], "notes": "" }
              ]
            },
            {
              "paragraph": "13.5.4",
              "title": "Exponentiation operator (**) ",
              "url": "https://tc39.es/ecma262/#sec-exp-operator",
              "features": [
                { "feature": "Binary ** (Exponentiation)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_ExpNumberNumber.js"], "notes": "" }
              ]
            },
            {
              "paragraph": "13.5.6",
              "title": "Bitwise operators (&, |, ^)",
              "url": "https://tc39.es/ecma262/#sec-binary-bitwise-operators",
              "features": [
                { "feature": "Binary & (Bitwise AND)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_BitwiseAndNumberNumber.js"], "notes": "" },
                { "feature": "Binary | (Bitwise OR)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_BitwiseOrNumberNumber.js"], "notes": "" },
                { "feature": "Binary ^ (Bitwise XOR)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_BitwiseXorNumberNumber.js"], "notes": "" }
              ]
            },
            {
              "paragraph": "13.5.7",
              "title": "Shift operators (<<, >>, >>>)",
              "url": "https://tc39.es/ecma262/#sec-left-shift-operator",
              "features": [
                { "feature": "Binary << (Left shift)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_LeftShiftNumberNumber.js"], "notes": "" },
                { "feature": "Binary >> (Signed right shift)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_RightShiftNumberNumber.js"], "notes": "" },
                { "feature": "Binary >>> (Unsigned right shift)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_UnsignedRightShiftNumberNumber.js"], "notes": "" }
              ]
            },
            {
              "paragraph": "13.5.8",
              "title": "Relational operators (<, <=, >, >=)",
              "url": "https://tc39.es/ecma262/#sec-relational-operators",
              "features": [
                { "feature": "Binary < (Less than)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_LessThan.js"], "notes": "" },
                { "feature": "Binary <= (Less than or equal)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_LessThanOrEqual.js"], "notes": "" },
                { "feature": "Binary > (Greater than)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_GreaterThan.js"], "notes": "" },
                { "feature": "Binary >= (Greater than or equal)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/BinaryOperator_GreaterThanOrEqual.js"], "notes": "" }
              ]
            },
            {
              "paragraph": "13.5.9",
              "title": "Equality operators (==)",
              "url": "https://tc39.es/ecma262/#sec-equality-operators",
              "features": [
                { "feature": "Binary == (Equality)", "status": "Supported", "testScripts": [
                  "Js2IL.Tests/JavaScript/BinaryOperator_Equal.js",
                  "Js2IL.Tests/JavaScript/Function_IsEven_CompareResultToTrue.js"
                ], "notes": "Covers numeric and boolean equality, including comparisons against literals and function-returned booleans with selective boxing/unboxing. See also generator snapshot: Js2IL.Tests/BinaryOperator/GeneratorTests.BinaryOperator_EqualBoolean.verified.txt." }
              ]
            },
            {
              "paragraph": "13.5.10",
              "title": "Logical operators (||, &&)",
              "url": "https://tc39.es/ecma262/#sec-binary-logical-operators",
              "features": [
                {
                  "feature": "Binary || (Logical OR) with short-circuit",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/BinaryOperator_LogicalOr_Value.js"
                  ],
                  "notes": "Value form returns left if truthy, otherwise right; branching form uses JS ToBoolean for conditions. Right-hand side is not evaluated when short-circuited."
                },
                {
                  "feature": "Binary && (Logical AND) with short-circuit",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/BinaryOperator_LogicalAnd_Value.js"
                  ],
                  "notes": "Value form returns left if falsy, otherwise right; branching form uses JS ToBoolean for conditions. Right-hand side is not evaluated when short-circuited."
                }
              ]
            }
          ]
        },
        {
          "subsection": "13.15",
          "title": "Assignment Operators",
          "url": "https://tc39.es/ecma262/#sec-assignment-operators",
          "paragraphs": [
            {
              "paragraph": "13.15.2",
              "title": "Assignment Operators (+=, -=, ...)",
              "url": "https://tc39.es/ecma262/#sec-assignment-operators",
              "features": [
                {
                  "feature": "Compound assignment += with strings",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/String_PlusEquals_Append.js"
                  ],
                  "notes": "+= on identifiers uses JavaScriptRuntime.Operators.Add for JS coercion and stores back to the same binding; validated by generator snapshot."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "section": "20",
      "title": "The Math Object",
      "url": "https://tc39.es/ecma262/#sec-math-object",
      "subsections": [
        {
          "subsection": "20.2.1",
          "title": "Value Properties of the Math Object",
          "url": "https://tc39.es/ecma262/#sec-value-properties-of-the-math-object",
          "paragraphs": [
            {
              "paragraph": "20.2.1",
              "title": "Math constants",
              "url": "https://tc39.es/ecma262/#sec-value-properties-of-the-math-object",
              "features": [
                { "feature": "Math.E", "status": "Supported", "notes": "Eulerâ€™s number e." },
                { "feature": "Math.LN10", "status": "Supported", "notes": "Natural logarithm of 10." },
                { "feature": "Math.LN2", "status": "Supported", "notes": "Natural logarithm of 2." },
                { "feature": "Math.LOG10E", "status": "Supported", "notes": "Base-10 logarithm of e." },
                { "feature": "Math.LOG2E", "status": "Supported", "notes": "Base-2 logarithm of e." },
                { "feature": "Math.PI", "status": "Supported", "notes": "Ratio of a circleâ€™s circumference to its diameter." },
                { "feature": "Math.SQRT1_2", "status": "Supported", "notes": "Square root of 1/2." },
                { "feature": "Math.SQRT2", "status": "Supported", "notes": "Square root of 2." }
              ]
            }
          ]
        },
        {
          "subsection": "20.2.2",
          "title": "Function Properties of the Math Object",
          "url": "https://tc39.es/ecma262/#sec-function-properties-of-the-math-object",
          "paragraphs": [
            {
              "paragraph": "20.2.2.1",
              "title": "Math.abs",
              "url": "https://tc39.es/ecma262/#sec-math.abs",
              "features": [
                { "feature": "Math.abs(x)", "status": "Supported", "notes": "Returns the absolute value; NaN propagates; Â±Infinity preserved." }
              ]
            },
            {
              "paragraph": "20.2.2.2",
              "title": "Math.acos",
              "url": "https://tc39.es/ecma262/#sec-math.acos",
              "features": [
                { "feature": "Math.acos(x)", "status": "Supported", "notes": "Returns arc cosine in radians; out-of-domain yields NaN." }
              ]
            },
            {
              "paragraph": "20.2.2.3",
              "title": "Math.acosh",
              "url": "https://tc39.es/ecma262/#sec-math.acosh",
              "features": [
                { "feature": "Math.acosh(x)", "status": "Supported", "notes": "Inverse hyperbolic cosine; x < 1 yields NaN; Infinity preserved." }
              ]
            },
            {
              "paragraph": "20.2.2.4",
              "title": "Math.asin",
              "url": "https://tc39.es/ecma262/#sec-math.asin",
              "features": [
                { "feature": "Math.asin(x)", "status": "Supported", "notes": "Returns arc sine in radians; out-of-domain yields NaN." }
              ]
            },
            {
              "paragraph": "20.2.2.5",
              "title": "Math.asinh",
              "url": "https://tc39.es/ecma262/#sec-math.asinh",
              "features": [
                { "feature": "Math.asinh(x)", "status": "Supported", "notes": "Inverse hyperbolic sine; handles Â±0, NaN, Â±Infinity per spec." }
              ]
            },
            {
              "paragraph": "20.2.2.6",
              "title": "Math.atan",
              "url": "https://tc39.es/ecma262/#sec-math.atan",
              "features": [
                { "feature": "Math.atan(x)", "status": "Supported", "notes": "Returns arc tangent in radians; NaN propagates; Â±Infinity maps to Â±Ï€/2." }
              ]
            },
            {
              "paragraph": "20.2.2.7",
              "title": "Math.atan2",
              "url": "https://tc39.es/ecma262/#sec-math.atan2",
              "features": [
                { "feature": "Math.atan2(y, x)", "status": "Supported", "notes": "Quadrant-aware arc tangent; handles zeros, NaN, and infinities per spec." }
              ]
            },
            {
              "paragraph": "20.2.2.9",
              "title": "Math.ceil",
              "url": "https://tc39.es/ecma262/#sec-math.ceil",
              "features": [
                {
                  "feature": "Math.ceil(x)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/Math/JavaScript/Math_Ceil_Sqrt_Basic.js"
                  ],
                  "notes": "Implements ceiling for numbers represented as double; arguments coerced via minimal ToNumber semantics. Returns NaN for NaN/undefined or negative zero preserved via .NET semantics."
                }
              ]
            },
            {
              "paragraph": "20.2.2.10",
              "title": "Math.clz32",
              "url": "https://tc39.es/ecma262/#sec-math.clz32",
              "features": [
                { "feature": "Math.clz32(x)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Imul_Clz32_Basics.js"], "notes": "Counts leading zero bits in the 32-bit unsigned integer representation." }
              ]
            },
            {
              "paragraph": "20.2.2.11",
              "title": "Math.cos",
              "url": "https://tc39.es/ecma262/#sec-math.cos",
              "features": [
                { "feature": "Math.cos(x)", "status": "Supported", "notes": "Cosine of x (radians); NaN propagates; Infinity yields NaN." }
              ]
            },
            {
              "paragraph": "20.2.2.12",
              "title": "Math.cosh",
              "url": "https://tc39.es/ecma262/#sec-math.cosh",
              "features": [
                { "feature": "Math.cosh(x)", "status": "Supported", "notes": "Hyperbolic cosine; handles Â±0, NaN, Â±Infinity per spec." }
              ]
            },
            {
              "paragraph": "20.2.2.13",
              "title": "Math.exp",
              "url": "https://tc39.es/ecma262/#sec-math.exp",
              "features": [
                { "feature": "Math.exp(x)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Log_Exp_Identity.js"], "notes": "e^x; consistent with JS semantics for NaN and infinities." }
              ]
            },
            {
              "paragraph": "20.2.2.14",
              "title": "Math.expm1",
              "url": "https://tc39.es/ecma262/#sec-math.expm1",
              "features": [
                { "feature": "Math.expm1(x)", "status": "Supported", "notes": "Returns e^x - 1 with improved precision for small x." }
              ]
            },
            {
              "paragraph": "20.2.2.15",
              "title": "Math.floor",
              "url": "https://tc39.es/ecma262/#sec-math.floor",
              "features": [
                { "feature": "Math.floor(x)", "status": "Supported", "notes": "Largest integer less than or equal to x; preserves -0 when appropriate." }
              ]
            },
            {
              "paragraph": "20.2.2.16",
              "title": "Math.fround",
              "url": "https://tc39.es/ecma262/#sec-math.fround",
              "features": [
                { "feature": "Math.fround(x)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Fround_SignedZero.js"], "notes": "Rounds to nearest 32-bit float; preserves signed zero." }
              ]
            },
            {
              "paragraph": "20.2.2.17",
              "title": "Math.hypot",
              "url": "https://tc39.es/ecma262/#sec-math.hypot",
              "features": [
                { "feature": "Math.hypot(...values)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Hypot_Infinity_NaN.js"], "notes": "Computes sqrt(sum(x_i^2)); returns Infinity if any arg is Â±Infinity; NaN if any arg is NaN and none are Infinity." }
              ]
            },
            {
              "paragraph": "20.2.2.18",
              "title": "Math.imul",
              "url": "https://tc39.es/ecma262/#sec-math.imul",
              "features": [
                { "feature": "Math.imul(a, b)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Imul_Clz32_Basics.js"], "notes": "C-style 32-bit integer multiplication with wrapping." }
              ]
            },
            {
              "paragraph": "20.2.2.19",
              "title": "Math.log",
              "url": "https://tc39.es/ecma262/#sec-math.log",
              "features": [
                { "feature": "Math.log(x)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Log_Exp_Identity.js"], "notes": "Natural logarithm; log(1) = 0; negative x yields NaN; log(0) = -Infinity." }
              ]
            },
            {
              "paragraph": "20.2.2.20",
              "title": "Math.log10",
              "url": "https://tc39.es/ecma262/#sec-math.log10",
              "features": [
                { "feature": "Math.log10(x)", "status": "Supported", "notes": "Base-10 logarithm; JS semantics for 0, negatives, NaN, and infinities." }
              ]
            },
            {
              "paragraph": "20.2.2.21",
              "title": "Math.log1p",
              "url": "https://tc39.es/ecma262/#sec-math.log1p",
              "features": [
                { "feature": "Math.log1p(x)", "status": "Supported", "notes": "log(1 + x) with improved precision for small x." }
              ]
            },
            {
              "paragraph": "20.2.2.22",
              "title": "Math.log2",
              "url": "https://tc39.es/ecma262/#sec-math.log2",
              "features": [
                { "feature": "Math.log2(x)", "status": "Supported", "notes": "Base-2 logarithm; JS semantics for 0, negatives, NaN, and infinities." }
              ]
            },
            {
              "paragraph": "20.2.2.23",
              "title": "Math.max",
              "url": "https://tc39.es/ecma262/#sec-math.max",
              "features": [
                { "feature": "Math.max(...values)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Min_Max_NaN_EmptyArgs.js"], "notes": "Returns the largest of the given numbers; with no arguments returns -Infinity; if any argument is NaN returns NaN." }
              ]
            },
            {
              "paragraph": "20.2.2.24",
              "title": "Math.sqrt",
              "url": "https://tc39.es/ecma262/#sec-math.sqrt",
              "features": [
                {
                  "feature": "Math.sqrt(x)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/Math/JavaScript/Math_Ceil_Sqrt_Basic.js"
                  ],
                  "notes": "Returns the square root for non-negative inputs; negative or NaN yields NaN; Infinity maps to Infinity."
                }
              ]
            },
            {
              "paragraph": "20.2.2.25",
              "title": "Math.pow",
              "url": "https://tc39.es/ecma262/#sec-math.pow",
              "features": [
                { "feature": "Math.pow(x, y)", "status": "Supported", "notes": "Exponentiation; consistent with JS semantics including NaN and Infinity cases." }
              ]
            },
            {
              "paragraph": "20.2.2.26",
              "title": "Math.random",
              "url": "https://tc39.es/ecma262/#sec-math.random",
              "features": [
                { "feature": "Math.random()", "status": "Supported", "notes": "Returns a pseudo-random number in the range [0, 1)." }
              ]
            },
            {
              "paragraph": "20.2.2.27",
              "title": "Math.round",
              "url": "https://tc39.es/ecma262/#sec-math.round",
              "features": [
                { "feature": "Math.round(x)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Round_Trunc_NegativeHalves.js"], "notes": "Rounds to the nearest integer; ties at .5 round up toward +âˆž; exact -0.5 returns -0." }
              ]
            },
            {
              "paragraph": "20.2.2.28",
              "title": "Math.sign",
              "url": "https://tc39.es/ecma262/#sec-math.sign",
              "features": [
                { "feature": "Math.sign(x)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Sign_ZeroVariants.js"], "notes": "Returns 1, -1, 0, -0, or NaN depending on the sign of x; Â±Infinity map to Â±1." }
              ]
            },
            {
              "paragraph": "20.2.2.29",
              "title": "Math.sin",
              "url": "https://tc39.es/ecma262/#sec-math.sin",
              "features": [
                { "feature": "Math.sin(x)", "status": "Supported", "notes": "Sine of x (radians); NaN propagates; Infinity yields NaN." }
              ]
            },
            {
              "paragraph": "20.2.2.30",
              "title": "Math.sinh",
              "url": "https://tc39.es/ecma262/#sec-math.sinh",
              "features": [
                { "feature": "Math.sinh(x)", "status": "Supported", "notes": "Hyperbolic sine; handles Â±0, NaN, Â±Infinity per spec." }
              ]
            },
            {
              "paragraph": "20.2.2.31",
              "title": "Math.tan",
              "url": "https://tc39.es/ecma262/#sec-math.tan",
              "features": [
                { "feature": "Math.tan(x)", "status": "Supported", "notes": "Tangent of x (radians); NaN propagates; Infinity yields NaN." }
              ]
            },
            {
              "paragraph": "20.2.2.32",
              "title": "Math.tanh",
              "url": "https://tc39.es/ecma262/#sec-math.tanh",
              "features": [
                { "feature": "Math.tanh(x)", "status": "Supported", "notes": "Hyperbolic tangent; handles Â±0, NaN, Â±Infinity per spec." }
              ]
            },
            {
              "paragraph": "20.2.2.33",
              "title": "Math.trunc",
              "url": "https://tc39.es/ecma262/#sec-math.trunc",
              "features": [
                { "feature": "Math.trunc(x)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Round_Trunc_NegativeHalves.js"], "notes": "Removes fractional part; preserves sign for zero (can return -0)." }
              ]
            },
            {
              "paragraph": "20.2.2.34",
              "title": "Math.min",
              "url": "https://tc39.es/ecma262/#sec-math.min",
              "features": [
                { "feature": "Math.min(...values)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Min_Max_NaN_EmptyArgs.js"], "notes": "Returns the smallest of the given numbers; with no arguments returns Infinity; if any argument is NaN returns NaN." }
              ]
            },
            {
              "paragraph": "20.2.2.35",
              "title": "Math.cbrt",
              "url": "https://tc39.es/ecma262/#sec-math.cbrt",
              "features": [
                { "feature": "Math.cbrt(x)", "status": "Supported", "testScripts": ["Js2IL.Tests/Math/JavaScript/Math_Cbrt_Negative.js"], "notes": "Cube root; handles negative values returning negative result; NaN propagates; Infinity preserved." }
              ]
            }
          ]
        }
      ]
    },
    {
      "section": "21",
      "title": "Date Objects",
      "url": "https://tc39.es/ecma262/#sec-date-objects",
      "subsections": [
        {
          "subsection": "21.4.1",
          "title": "The Date Constructor",
          "url": "https://tc39.es/ecma262/#sec-date-constructor",
          "paragraphs": [
            {
              "paragraph": "21.4.1",
              "title": "Date constructor",
              "url": "https://tc39.es/ecma262/#sec-date-constructor",
              "features": [
                {
                  "feature": "new Date() (current time)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/Date/ExecutionTests.cs"
                  ],
                  "notes": "Constructs a Date representing now (UTC). Stores milliseconds since Unix epoch internally."
                },
                {
                  "feature": "new Date(milliseconds)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Date_Construct_FromMs_GetTime_ToISOString.js"
                  ],
                  "notes": "Constructs from milliseconds since Unix epoch; numeric argument is coerced per JS ToNumber minimal behavior."
                }
              ]
            }
          ]
        },
        {
          "subsection": "21.4.2",
          "title": "Properties of the Date Constructor",
          "url": "https://tc39.es/ecma262/#sec-properties-of-the-date-constructor",
          "paragraphs": [
            {
              "paragraph": "21.4.2.1",
              "title": "Date.now",
              "url": "https://tc39.es/ecma262/#sec-date.now",
              "features": [
                {
                  "feature": "Date.now()",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/Date/ExecutionTests.cs"
                  ],
                  "notes": "Returns current time in milliseconds since Unix epoch as a number (boxed double)."
                }
              ]
            },
            {
              "paragraph": "21.4.2.2",
              "title": "Date.parse",
              "url": "https://tc39.es/ecma262/#sec-date.parse",
              "features": [
                {
                  "feature": "Date.parse(string)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/Date/ExecutionTests.cs",
                    "Js2IL.Tests/Date/ExecutionTests.Date_Parse_IsoString.verified.txt"
                  ],
                  "notes": "Parses an ISO-like string to milliseconds since Unix epoch, or NaN on failure; returns a number (boxed double)."
                }
              ]
            }
          ]
        },
        {
          "subsection": "21.4.3",
          "title": "Properties of the Date Prototype Object",
          "url": "https://tc39.es/ecma262/#sec-properties-of-the-date-prototype-object",
          "paragraphs": [
            {
              "paragraph": "21.4.3.5",
              "title": "Date.prototype.getTime",
              "url": "https://tc39.es/ecma262/#sec-date.prototype.gettime",
              "features": [
                {
                  "feature": "Date.prototype.getTime",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Date_Construct_FromMs_GetTime_ToISOString.js",
                    "Js2IL.Tests/Date/ExecutionTests.Date_Construct_FromMs_GetTime_ToISOString.verified.txt"
                  ],
                  "notes": "Returns milliseconds since Unix epoch as a number (boxed double)."
                }
              ]
            },
            {
              "paragraph": "21.4.3.27",
              "title": "Date.prototype.toISOString",
              "url": "https://tc39.es/ecma262/#sec-date.prototype.toisostring",
              "features": [
                {
                  "feature": "Date.prototype.toISOString",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Date_Construct_FromMs_GetTime_ToISOString.js",
                    "Js2IL.Tests/Date/ExecutionTests.Date_Construct_FromMs_GetTime_ToISOString.verified.txt"
                  ],
                  "notes": "Returns a UTC ISO 8601 string with millisecond precision and trailing 'Z'."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "section": "14",
      "title": "ECMAScript Language: Statements and Declarations",
      "url": "https://tc39.es/ecma262/#sec-ecmascript-language-statements-and-declarations",
      "subsections": [
        {
          "subsection": "14.1",
          "title": "Return Statement",
          "url": "https://tc39.es/ecma262/#sec-return-statement",
          "paragraphs": [
            {
              "paragraph": "14.1.1",
              "title": "Runtime Semantics: ReturnStatement Evaluation",
              "url": "https://tc39.es/ecma262/#sec-return-statement",
              "features": [
                {
                  "feature": "return statement (basic)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Function_ReturnsStaticValueAndLogs.js"
                  ],
                  "notes": "Function returns propagate values (boxed) to callers; validated by execution snapshot showing returned value."
                }
              ]
            }
          ]
        },
        {
          "subsection": "14.6",
          "title": "The if Statement",
          "url": "https://tc39.es/ecma262/#sec-if-statement",
          "paragraphs": [
            {
              "paragraph": "14.6.2",
              "title": "Runtime Semantics: Evaluation",
              "url": "https://tc39.es/ecma262/#sec-if-statement",
              "features": [
                { "feature": "if statement (LessThan)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_If_LessThan.js"], "notes": "" },
                { "feature": "if statement (!flag)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_If_NotFlag.js"], "notes": "Logical not in conditional test supported." },
                { "feature": "if statement (result == true)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/Function_IsEven_CompareResultToTrue.js"], "notes": "Compares function-returned boolean to true and branches accordingly." },
                { "feature": "if condition truthiness (non-boolean)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_If_Truthiness.js"], "notes": "Conditions like if (url) are coerced via JS ToBoolean semantics (empty string/0/NaN/undefined/null => false; others => true)." }
              ]
            }
          ]
        },
        {
          "subsection": "14.7.4",
          "title": "The for Statement",
          "url": "https://tc39.es/ecma262/#sec-for-statement",
          "paragraphs": [
            {
              "paragraph": "14.7.4.2",
              "title": "Runtime Semantics: ForLoopEvaluation",
              "url": "https://tc39.es/ecma262/#sec-runtime-semantics-forloopevaluation",
              "features": [
                { "feature": "for loop (CountToFive)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_ForLoop_CountToFive.js"], "notes": "" },
                { "feature": "for loop (CountDownFromFive)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_ForLoop_CountDownFromFive.js"], "notes": "" },
                { "feature": "for loop (LessThanOrEqual)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_ForLoop_LessThanOrEqual.js"], "notes": "" },
                { "feature": "for loop (GreaterThanOrEqual)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_ForLoop_GreaterThanOrEqual.js"], "notes": "" },
                { "feature": "for loop: continue", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_ForLoop_Continue_SkipEven.js"], "notes": "Implements continue by branching to the update expression (LoopContext)." },
                { "feature": "for loop: break", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_ForLoop_Break_AtThree.js"], "notes": "Implements break by branching to loop end label (LoopContext)." }
              ]
            }
          ]
        }
        ,
        {
          "subsection": "14.7.2",
          "title": "The while Statement",
          "url": "https://tc39.es/ecma262/#sec-while-statement",
          "paragraphs": [
            {
              "paragraph": "14.7.2.1",
              "title": "Runtime Semantics: WhileStatement Evaluation",
              "url": "https://tc39.es/ecma262/#sec-while-statement",
              "features": [
                { "feature": "while loop (CountDownFromFive)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_While_CountDownFromFive.js"], "notes": "" },
                { "feature": "while loop: continue (skip even)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_While_Continue_SkipEven.js"], "notes": "continue branches to loop head (LoopContext)." },
                { "feature": "while loop: break", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_While_Break_AtThree.js"], "notes": "break branches to loop end (LoopContext)." }
              ]
            }
          ]
        }
        ,
        {
          "subsection": "14.7.1",
          "title": "The do-while Statement",
          "url": "https://tc39.es/ecma262/#sec-do-while-statement",
          "paragraphs": [
            {
              "paragraph": "14.7.1.1",
              "title": "Runtime Semantics: DoWhileStatement Evaluation",
              "url": "https://tc39.es/ecma262/#sec-do-while-statement",
              "features": [
                { "feature": "do-while loop (CountDownFromFive)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_DoWhile_CountDownFromFive.js"], "notes": "" },
                { "feature": "do-while loop: continue (skip even)", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_DoWhile_Continue_SkipEven.js"], "notes": "continue branches to the post-body test point (LoopContext)." },
                { "feature": "do-while loop: break", "status": "Supported", "testScripts": ["Js2IL.Tests/JavaScript/ControlFlow_DoWhile_Break_AtThree.js"], "notes": "break branches to loop end (LoopContext)." }
              ]
            }
          ]
        }
        ,
        {
          "subsection": "14.7.5",
          "title": "The for-of Statement",
          "url": "https://tc39.es/ecma262/#sec-for-in-and-for-of-statements",
          "paragraphs": [
            {
              "paragraph": "14.7.5.1",
              "title": "Runtime Semantics: ForInOfBodyEvaluation (for-of)",
              "url": "https://tc39.es/ecma262/#sec-runtime-semantics-forinofbodyevaluation",
              "features": [
                {
                  "feature": "for-of over arrays (enumerate values)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/ControlFlow_ForOf_Array_Basic.js"
                  ],
                  "notes": "Emitted by indexing iterable via JavaScriptRuntime.Object.GetLength(object) and GetItem(object, double); uses object locals for iterator state."
                }
              ]
            }
          ]
        }
        ,
        {
          "subsection": "14.16",
          "title": "The try Statement",
          "url": "https://tc39.es/ecma262/#sec-try-statement",
          "paragraphs": [
            {
              "paragraph": "14.16.1",
              "title": "Runtime Semantics: TryStatement Evaluation",
              "url": "https://tc39.es/ecma262/#sec-try-statement",
              "features": [
                {
                  "feature": "throw statement",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/TryCatch_NoBinding.js"
                  ],
                  "notes": "Emits throw of JavaScriptRuntime.Error; used in try/catch tests."
                },
                {
                  "feature": "try/catch (no binding)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/TryCatch_NoBinding.js",
                    "Js2IL.Tests/JavaScript/TryCatch_NoBinding_NoThrow.js"
                  ],
                  "notes": "Catch blocks currently handle only JavaScriptRuntime.Error thrown within the try; exceptions thrown later (after returning a closure) are not caught by the earlier catch."
                },
                {
                  "feature": "try/finally (no catch)",
                  "status": "Partially Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/TryFinally_NoCatch.js",
                    "Js2IL.Tests/JavaScript/TryFinally_NoCatch_Throw.js"
                  ],
                  "notes": "Finally emission is in place. Execution test for throw is skipped pending unhandled Error semantics at top-level; generator snapshot verifies structure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "section": "15",
      "title": "ECMAScript Language: Classes",
      "url": "https://tc39.es/ecma262/#sec-ecmascript-language-classes",
      "subsections": [
        {
          "subsection": "15.1",
          "title": "Class Definitions",
          "url": "https://tc39.es/ecma262/#sec-class-definitions",
          "paragraphs": [
            {
              "paragraph": "15.1.1",
              "title": "Basic class features",
              "url": "https://tc39.es/ecma262/#sec-class-definitions",
              "features": [
                {
                  "feature": "Class declaration (empty)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Classes_DeclareEmptyClass.js"
                  ],
                  "notes": ""
                },
                {
                  "feature": "Instance method (declare and call)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Classes_ClassWithMethod_HelloWorld.js"
                  ],
                  "notes": ""
                },
                {
                  "feature": "Static method (declare and call)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Classes_ClassWithStaticMethod_HelloWorld.js"
                  ],
                  "notes": ""
                },
                {
                  "feature": "Instance field initializer (public property default)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Classes_ClassProperty_DefaultAndLog.js"
                  ],
                  "notes": "Emitted by assigning defaults in the generated .ctor."
                },
                {
                  "feature": "Static field initializer (static property default)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Classes_ClassWithStaticProperty_DefaultAndLog.js"
                  ],
                  "notes": "Emitted as a static field initialized in a synthesized .cctor; accessed via ldsfld."
                },
                {
                  "feature": "Constructor with parameter and this.field assignment; method reads field",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Classes_ClassConstructor_Param_Field_Log.js"
                  ],
                  "notes": ""
                },
                {
                  "feature": "Constructor with multiple parameters; method uses fields",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Classes_ClassConstructor_WithMultipleParameters.js",
                    "Js2IL.Tests/JavaScript/Classes_ClassConstructor_TwoParams_AddMethod.js",
                    "Js2IL.Tests/JavaScript/Classes_ClassConstructor_TwoParams_SubtractMethod.js"
                  ],
                  "notes": "Covers multi-parameter constructors and arithmetic in instance methods."
                },
                {
                  "feature": "Private instance field (#) with helper method access",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Classes_ClassPrivateField_HelperMethod_Log.js"
                  ],
                  "notes": "Generated as a private .NET field with a mangled name; accessible only within the class."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "section": "23",
      "title": "Array Objects",
      "url": "https://tc39.es/ecma262/#sec-array-objects",
      "subsections": [
        {
          "subsection": "23.1",
          "title": "Properties of Array Instances",
          "url": "https://tc39.es/ecma262/#sec-properties-of-array-instances",
          "paragraphs": [
            {
              "paragraph": "23.1.2.1",
              "title": "length",
              "url": "https://tc39.es/ecma262/#sec-properties-of-array-instances",
              "features": [
                {
                  "feature": "Array.length property (read)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_LengthProperty_ReturnsCount.js",
                    "Js2IL.Tests/JavaScript/Array_EmptyLength_IsZero.js"
                  ],
                  "notes": "length getter returns number of elements; emitted via JavaScriptRuntime.Object.GetLength(object). Used by for-of implementation."
                }
              ]
            },
            {
              "paragraph": "23.1.3.13",
              "title": "Array.prototype.join",
              "url": "https://tc39.es/ecma262/#sec-array.prototype.join",
              "features": [
                {
                  "feature": "Array.prototype.join",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_Join_Basic.js"
                  ],
                  "notes": "Elements are stringified via DotNet2JSConversions.ToString and joined with a separator (default ','). Codegen dispatches to JavaScriptRuntime.Array.join(object[])."
                }
              ]
            },
            {
              "paragraph": "23.1.3.20",
              "title": "Array.prototype.pop",
              "url": "https://tc39.es/ecma262/#sec-array.prototype.pop",
              "features": [
                {
                  "feature": "Array.prototype.pop",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_Pop_Basic.js"
                  ],
                  "notes": "Removes and returns the last element; when empty returns undefined (represented as null in this runtime)."
                }
              ]
            },
            {
              "paragraph": "23.1.3.22",
              "title": "Array.prototype.push",
              "url": "https://tc39.es/ecma262/#sec-array.prototype.push",
              "features": [
                {
                  "feature": "Array.prototype.push",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_Push_Basic.js"
                  ],
                  "notes": "Appends items to the end of the array and returns the new length (as a JS number)."
                }
              ]
            },
            {
              "paragraph": "23.1.3.25",
              "title": "Array.prototype.map",
              "url": "https://tc39.es/ecma262/#sec-array.prototype.map",
              "features": [
                {
                  "feature": "Array.prototype.map",
                  "status": "Partially Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_Map_Basic.js"
                  ],
                  "notes": "Supports basic value-callback mapping and returns a new array. thisArg and additional callback parameters (index, array) are not yet supported."
                }
              ]
            },
            {
              "paragraph": "23.1.3.27",
              "title": "Array.prototype.sort",
              "url": "https://tc39.es/ecma262/#sec-array.prototype.sort",
              "features": [
                {
                  "feature": "Array.prototype.sort (default comparator)",
                  "status": "Partially Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_Sort_Basic.js"
                  ],
                  "notes": "Default lexicographic sort implemented in JavaScriptRuntime.Array.sort(); comparator function parameter is not yet supported. Returns the array instance."
                }
              ]
            },
            {
              "paragraph": "23.1.3.28",
              "title": "Array.prototype.slice",
              "url": "https://tc39.es/ecma262/#sec-array.prototype.slice",
              "features": [
                {
                  "feature": "Array.prototype.slice",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_Slice_Basic.js"
                  ],
                  "notes": "Returns a shallow copy; handles negative indices and undefined end per spec."
                }
              ]
            },
            {
              "paragraph": "23.1.3.31",
              "title": "Array.prototype.splice",
              "url": "https://tc39.es/ecma262/#sec-array.prototype.splice",
              "features": [
                {
                  "feature": "Array.prototype.splice",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_Splice_Basic.js",
                    "Js2IL.Tests/JavaScript/Array_Splice_InsertAndDelete.js"
                  ],
                  "notes": "Mutates the array by removing and/or inserting elements; returns an array of removed elements."
                }
              ]
            }
          ]
        },
        {
          "subsection": "23.1.2",
          "title": "Properties of the Array Constructor",
          "url": "https://tc39.es/ecma262/#sec-properties-of-the-array-constructor",
          "paragraphs": [
            {
              "paragraph": "23.1.2",
              "title": "Array.isArray",
              "url": "https://tc39.es/ecma262/#sec-array.isarray",
              "features": [
                {
                  "feature": "Array.isArray",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/Array_IsArray_Basic.js"
                  ],
                  "notes": "Returns true for JavaScriptRuntime.Array instances; false otherwise."
                }
              ]
            }
          ]
        }
      ]
    },
    {
          "section": "23.2",
          "title": "TypedArray Objects",
          "url": "https://tc39.es/ecma262/#sec-typedarray-objects",
          "subsections": [
            {
              "subsection": "23.2.1",
              "title": "Int32Array",
              "url": "https://tc39.es/ecma262/#sec-typedarray-objects",
              "paragraphs": [
                {
                  "paragraph": "23.2.1.1",
                  "title": "Constructor and basic semantics",
                  "url": "https://tc39.es/ecma262/#sec-typedarray-objects",
                  "features": [
                    {
                      "feature": "Int32Array: new Int32Array(length), length, index get/set (basic)",
                      "status": "Supported",
                      "testScripts": [
                        "Js2IL.Tests/TypedArray/JavaScript/Int32Array_Construct_Length.js",
                        "Js2IL.Tests/TypedArray/ExecutionTests.Int32Array_Construct_Length.verified.txt"
                      ],
                      "notes": "Minimal typed array: exposes numeric length, supports indexing; out-of-bounds reads return 0 and out-of-bounds writes are ignored."
                    },
                    {
                      "feature": "Int32Array from array-like (copy and ToInt32 coercion)",
                      "status": "Supported",
                      "testScripts": [
                        "Js2IL.Tests/TypedArray/JavaScript/Int32Array_FromArray_CopyAndCoerce.js",
                        "Js2IL.Tests/TypedArray/ExecutionTests.Int32Array_FromArray_CopyAndCoerce.verified.txt"
                      ],
                      "notes": "Copies from array-like and coerces values using ToInt32-style truncation; NaN/Infinity/Â±0 become 0."
                    },
                    {
                      "feature": "Int32Array.prototype.set(source[, offset])",
                      "status": "Supported",
                      "testScripts": [
                        "Js2IL.Tests/TypedArray/JavaScript/Int32Array_Set_FromArray_WithOffset.js",
                        "Js2IL.Tests/TypedArray/ExecutionTests.Int32Array_Set_FromArray_WithOffset.verified.txt"
                      ],
                      "notes": "Copies elements from array-like or another Int32Array with optional offset; elements are coerced via ToInt32; offset < 0 treated as 0; copies stop at destination length."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
      "section": "24",
      "title": "Text Processing",
      "url": "https://tc39.es/ecma262/#sec-text-processing",
      "subsections": [
        {
          "subsection": "24.1",
          "title": "String Objects",
          "url": "https://tc39.es/ecma262/#sec-string-objects",
          "paragraphs": [
            {
              "paragraph": "24.1.3",
              "title": "String.prototype.startsWith",
              "url": "https://tc39.es/ecma262/#sec-string.prototype.startswith",
              "features": [
                {
                  "feature": "String.prototype.startsWith",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/String_StartsWith_Basic.js"
                  ],
                  "notes": "Reflection-based string dispatch routes CLR string receivers to JavaScriptRuntime.String.StartsWith with optional position argument. Returns a boolean value (boxed)."
                }
              ]
            },
            {
              "paragraph": "24.1.4",
              "title": "String.prototype.localeCompare",
              "url": "https://tc39.es/ecma262/#sec-string.prototype.localecompare",
              "features": [
                {
                  "feature": "String.prototype.localeCompare (numeric compare)",
                  "status": "Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/String_LocaleCompare_Numeric.js"
                  ],
                  "notes": "Returns a number (boxed double) consistent with ECMAScript compare semantics; numeric option supported."
                }
              ]
            },
            {
              "paragraph": "24.1.3",
              "title": "String.prototype.replace",
              "url": "https://tc39.es/ecma262/#sec-string.prototype.replace",
              "features": [
                {
                  "feature": "String.prototype.replace (regex literal, string replacement)",
                  "status": "Partially Supported",
                  "testScripts": [
                    "Js2IL.Tests/JavaScript/String_Replace_Regex_Global.js"
                  ],
                  "notes": "Supported when the receiver is String(x), the pattern is a regular expression literal, and the replacement is a string. Global (g) and ignoreCase (i) flags are honored. Function replacement, non-regex patterns, and other flags are not yet implemented. Implemented via host intrinsic JavaScriptRuntime.String.Replace and dynamic resolution in IL generator."
                }
              ]
            }
          ]
        },
        {
          "subsection": "24.5",
          "title": "JSON Object",
          "url": "https://tc39.es/ecma262/#sec-json-object",
          "paragraphs": [
            {
              "paragraph": "24.5.1",
              "title": "JSON.parse",
              "url": "https://tc39.es/ecma262/#sec-json.parse",
              "features": [
                {
                  "feature": "JSON.parse",
                  "status": "Partially Supported",
                  "testScripts": [
                    "Js2IL.Tests/JSONRuntimeTests.cs"
                  ],
                  "notes": "Implemented via host intrinsic JavaScriptRuntime.JSON.Parse(string). Maps invalid input to SyntaxError and non-string input to TypeError. Reviver parameter is not supported. Objects become ExpandoObject, arrays use JavaScriptRuntime.Array, numbers use double."
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
